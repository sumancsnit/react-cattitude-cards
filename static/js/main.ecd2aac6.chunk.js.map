{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","cat","className","alt","src","id","name","email","CardList","cats","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","console","log","setState","serachInput","target","value","state","fetch","then","response","json","users","this","filteredcats","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uVAsBeA,G,kBAlBF,SAACC,GAAW,IACfC,EAAQD,EAARC,IACR,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,MACJC,IAAG,+BAA0BH,EAAII,GAA9B,4BAEL,4BAAKJ,EAAIK,MACT,2BAAIL,EAAIM,UCTDC,EAAW,SAACR,GAAW,IAC1BS,EAAST,EAATS,KACR,OACE,yBAAKP,UAAU,aACZO,EAAKC,KAAI,SAACT,GAAD,OACR,kBAAC,EAAD,CAAMU,IAAKV,EAAII,GAAIJ,IAAKA,SCNnBW,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,6BACE,2BACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCLGG,E,kDACnB,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAACI,GACdC,QAAQC,IAAI,2BAA4BF,GACxC,EAAKG,SAAS,CAAEC,YAAaJ,EAAEK,OAAOC,SAdtC,EAAKC,MAAQ,CACXhB,KAAM,GACNa,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OACvDA,EAASC,OAAOF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEZ,KAAMqB,Y,+BAShD,IAAD,EACuBC,KAAKN,MAA3BhB,EADD,EACCA,KAAMa,EADP,EACOA,YACRU,EAAevB,EAAKwB,QAAO,SAAChC,GAAD,OAC/BA,EAAIK,KAAK4B,cAAcC,SAASb,EAAYY,kBAE9C,OACE,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,WAAd,mBACA,kBAAC,EAAD,CACEW,YAAY,iBACZC,aAAciB,KAAKjB,eAErB,kBAAC,EAAD,CAAUL,KAAMuB,S,GAhCSI,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.ecd2aac6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './card.style.css';\n\nconst Card = (props) => {\n  const { cat } = props;\n  return (\n    <div className='card-container'>\n      <img\n        alt='cat'\n        src={`https://robohash.org/${cat.id}?set=set4&size=180x180`}\n      />\n      <h1>{cat.name}</h1>\n      <p>{cat.email}</p>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  cat: PropTypes.objectOf(PropTypes.any),\n};\n\nexport default Card;\n","import React from 'react';\nimport './card-list.style.css';\nimport Card from '../card/card.component';\n\nexport const CardList = (props) => {\n  const { cats } = props;\n  return (\n    <div className='card-list'>\n      {cats.map((cat) => (\n        <Card key={cat.id} cat={cat} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <div>\n      <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cats: [],\n      serachInput: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then((response) =>\n      response.json().then((users) => this.setState({ cats: users }))\n    );\n  }\n\n  handleChange = (e) => {\n    console.log('App -> handleChange -> e', e);\n    this.setState({ serachInput: e.target.value });\n  };\n\n  render() {\n    const { cats, serachInput } = this.state;\n    const filteredcats = cats.filter((cat) =>\n      cat.name.toLowerCase().includes(serachInput.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1 className='heading'>Cattitude Cards</h1>\n        <SearchBox\n          placeholder='Search cats...'\n          handleChange={this.handleChange}\n        />\n        <CardList cats={filteredcats}></CardList>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}